from flask_wtf import FlaskForm
from wtforms import TextAreaField, SubmitField, StringField, PasswordField, SelectField, IntegerField, BooleanField, DateField, TimeField, IntegerField, URLField, SubmitField
from wtforms.validators import InputRequired, Email, EqualTo, length, NumberRange, DataRequired, Length, URL, Optional
from flask_wtf.file import FileRequired, FileField, FileAllowed
from flask_sqlalchemy import SQLAlchemy
from .models import Event

ALLOWED_FILE = {'PNG', 'JPG', 'JPEG', 'png', 'jpg', 'jpeg'}
  
# User login
class LoginForm(FlaskForm):
    user_name = StringField("User Name", validators=[InputRequired('Enter user name')])
    password = PasswordField("Password", validators=[InputRequired('Enter user password')])
    submit = SubmitField("Login")

# User register
class RegisterForm(FlaskForm):
    full_name = StringField("Full Name", validators=[InputRequired()])
    user_name = StringField("Username (3-25 characters)", validators=[InputRequired(), length(min=3, max=25)])
    email_id = StringField("Email Address", validators=[Email("Please enter a valid email")])
    contact_number = StringField("Contact Number", validators=[InputRequired(), 
                                                               length(min=10,max=10, message="Enter 10 digit Number" )])
    street_address = StringField("Street Address", validators=[InputRequired()])

    # linking two fields - password should be equal to data entered in confirm
    password = PasswordField("Password (min 7 characters)", validators=[InputRequired(), 
                  length(min = 7, message="Passwords should be longer than 7 characters"),
                  EqualTo('confirm', message="Passwords should match")])
    confirm = PasswordField("Confirm Password (passwords should match)")
    # submit button
    submit = SubmitField("Register")


class EventForm(FlaskForm):
    #All filed required except image_url
    #Saves to Event table (Event in Models.py)
    title = StringField("Event Name", validators=[DataRequired(), Length(max=150)],
    render_kw={"id": "eventName", "class": "form-control"})

    artist_name = StringField("Artist/Band Name", validators=[DataRequired(), Length(max=150)],
    render_kw={"id": "artist", "class": "form-control"})

    genre = SelectField("Genre",
    choices=[("Rock","Rock"),("Jazz","Jazz"),("Indie","Indie"),("Electronic","Electronic"),("Hip Hop","Hip Hop")],
    validators=[DataRequired()],
    render_kw={"id": "genre", "class": "form-select"})

    capacity = IntegerField("Tickets Available", validators=[DataRequired(), NumberRange(min=1)],
    render_kw={"id": "tickets", "class": "form-control", "min": 1})

    venue_name = StringField("Venue", validators=[DataRequired(), Length(max=150)],
    render_kw={"id": "venue", "class": "form-control"})
    
    location = StringField("Location", validators=[DataRequired(), Length(max=150)],
    render_kw={"id": "location", "class": "form-control"})
    
    event_date = DateField("Date", validators=[DataRequired()],
    render_kw={"id": "date", "class": "form-control"})
    
    starts_at = TimeField("Start Time", validators=[DataRequired()],
    render_kw={"id": "time", "class": "form-control"})
    
    ends_at = TimeField("End Time", validators=[DataRequired()],
    render_kw={"id": "endTime", "class": "form-control"})
    
    image_url = URLField("Event Image URL", validators=[Optional(), URL()],
    render_kw={"id": "image", "class": "form-control"})
    
    description = TextAreaField("Description", validators=[DataRequired()],
    render_kw={"id": "desc", "class": "form-control", "rows": 5})
    
    submit = SubmitField("Create Event", render_kw={"class": "btn btn-primary btn-lg"})

class CommentForm(FlaskForm):
    #Text only input, user and event id generated by the logged in user id and the pages event id
    body = TextAreaField(
        "Your comment",
        validators=[DataRequired(), Length(min=1, max=1000)],
        render_kw={"rows": 3, "class": "form-control", "placeholder": "Share your thoughts..."}
    )
    submit = SubmitField("Post Comment", render_kw={"class": "btn btn-primary btn-sm"})


class CancelEventForm(FlaskForm):
    submit = SubmitField('Cancel Event')

# Ticket Purchase
class TicketForm(FlaskForm): 
    event = SelectField("Select Event", validators=[InputRequired()], coerce=int)
    
    quantity = IntegerField("Quantity", validators=[InputRequired(),NumberRange(min=1, max=10, message="You can purchase 1-10 tickets")])
    
    #submit button
    submit = SubmitField("Buy Tickets")

    #auto activate below method
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.event_choices()

    #checking if event cancelled
    def event_choices(self):
        choices=[]
        event = Event.query.all()
        for i in event:
            #check event is not cancelled
            if not i.cancelled:
                #show event ticekts
                choices.append((i.event_id, f"{i.title}"))
        self.event.choices = choices
